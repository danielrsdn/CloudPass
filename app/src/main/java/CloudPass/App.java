/*
 * This Java source file was generated by the Gradle 'init' task.
 */


package CloudPass;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.stream.Collectors;
import java.util.Map;

import com.google.gson.*;

import CloudPass.BusinessLogic.DataDB;
import CloudPass.BusinessLogic.PhotoStorage;
import CloudPass.BusinessLogic.Queue;
import CloudPass.BusinessLogic.model.PhotoMetadata;
import CloudPass.BusinessLogic.model.QueueMessage;
import CloudPass.BusinessLogic.model.UploadPhoto;
import CloudPass.BusinessLogic.model.User;
import CloudPass.BusinessLogic.model.UserRecipient;
import CloudPass.Infrastructure.DataDBImpl;
import CloudPass.Infrastructure.PhotoStorageImpl;
import CloudPass.Infrastructure.QueueImpl;
import CloudPass.Presentation.model.DeviceLoginRequest;
import CloudPass.Presentation.model.GetUserResponse;
import CloudPass.Presentation.model.LoginResponse;
import CloudPass.Presentation.model.NotifyRequest;
import CloudPass.Presentation.model.PhotoResponse;
import CloudPass.Presentation.model.PhotosResponse;
import CloudPass.Presentation.model.UpdateUserRequest;
import CloudPass.Presentation.model.UploadPhotoResponse;
import CloudPass.Presentation.model.UserLoginRequest;
import CloudPass.Utils.model.FailiureException;
import CloudPass.Utils.model.Result;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import software.amazon.awssdk.services.sqs.SqsClient;

public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {
    public static String JDBC_PREFIX = "jdbc:mysql://";
    public static String DB_ADMIN_USER = "admin";
    public static String DB_ADMIN_PWD = "Hooman1234!";
    public static String DB_ENDPOINT = "database-2.cqtiuexjm4nj.us-west-2.rds.amazonaws.com/data";
    public static String BUCKET = "arducambucket";
    public static String QUEUE_URL = "https://sqs.us-west-2.amazonaws.com/555446187154/NotificationQueue";

    private DataDB dataDB;
    private PhotoStorage photoStorage;
    private Queue messagingQueue;

    private Gson gson = new GsonBuilder().setPrettyPrinting().create();

    private static Connection createConnectionViaUserPwd(
            String username, String pwd,
            String dbEndpoint) {
        Connection connection;
        try {
            connection = DriverManager.getConnection(JDBC_PREFIX + dbEndpoint, username, pwd);
            return connection;
        }

        catch (SQLException e) {
        }

        return null;
    }

    private static S3Client createS3Client() {
        return S3Client.builder()
                .build();
    }

    private static S3Presigner createS3Presigner() {
        return S3Presigner.builder()
                .build();
    }

    private static SqsClient createSqsClient() {
        return SqsClient.builder()
                .build();
    }

    public App() {

        this.photoStorage = new PhotoStorageImpl(createS3Client(), createS3Presigner(), BUCKET);
        this.messagingQueue = new QueueImpl(createSqsClient(), QUEUE_URL, gson);
        try {
            this.dataDB = new DataDBImpl(createConnectionViaUserPwd(DB_ADMIN_USER, DB_ADMIN_PWD, DB_ENDPOINT));
        } catch (Exception e) {
        }
    }

    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent event, Context context) {
        context.getLogger().log("Got here\n");

        if (event.getHttpMethod().equalsIgnoreCase("GET")) {
            context.getLogger().log("GET REQUEST\n");
            return handleGet(event, context);
        }

        if (event.getHttpMethod().equalsIgnoreCase("PUT")) {
            context.getLogger().log("PUT REQUEST\n");
            return handlePut(event, context);
        }

        if (event.getHttpMethod().equalsIgnoreCase("POST")) {
            context.getLogger().log("POST REQUEST\n");
            return handlePost(event, context);
        }

        if (event.getHttpMethod().equalsIgnoreCase("OPTIONS")) {
            context.getLogger().log("OPTIONS REQUEST\n");
            Map<String, String> headers = new HashMap<>();
            headers.put("Access-Control-Allow-Origin", "*");
            headers.put("Access-Control-Allow-Methods", "POST, GET, PUT, OPTIONS");
            headers.put("Access-Control-Allow-Headers","session_id, Content-Type");
            headers.put("Access-Control-Max-Age","86400");
            return new APIGatewayProxyResponseEvent()
                .withStatusCode(204)
                .withHeaders(headers);

        }

        return new APIGatewayProxyResponseEvent()
                .withStatusCode(404);
    }

    public APIGatewayProxyResponseEvent handleGet(APIGatewayProxyRequestEvent event, Context context) {
        if (event.getPathParameters().get("version").equalsIgnoreCase("v1")) {
            context.getLogger().log("v1\n");
            if (event.getPathParameters().get("action").equalsIgnoreCase("photos")) {
                context.getLogger().log("photos\n");
                return getPhotos(event, context);
            }

            if (event.getPathParameters().get("action").equalsIgnoreCase("upload")) {
                context.getLogger().log("upload\n");
                return uploadPhoto(event, context);
            }

            if (event.getPathParameters().get("action").equalsIgnoreCase("user")) {
                context.getLogger().log("user\n");
                return getUser(event, context);
            }
        }

        return new APIGatewayProxyResponseEvent()
                .withStatusCode(404);
    }

    public APIGatewayProxyResponseEvent handlePut(APIGatewayProxyRequestEvent event, Context context) {
        if (event.getPathParameters().get("version").equalsIgnoreCase("v1")) {
            context.getLogger().log("v1\n");
            if (event.getPathParameters().get("action").equalsIgnoreCase("notify")) {
                context.getLogger().log("notify\n");
                return notify(event, context);
            }
            if (event.getPathParameters().get("action").equalsIgnoreCase("update")) {
                context.getLogger().log("update\n");
                return updateUser(event, context);
            }
        }

        return new APIGatewayProxyResponseEvent()
                .withStatusCode(404);
    }

    public APIGatewayProxyResponseEvent handlePost(APIGatewayProxyRequestEvent event, Context context) {
        if (event.getPathParameters().get("version").equalsIgnoreCase("v1")) {
            context.getLogger().log("v1\n");
            if (event.getPathParameters().get("action").equalsIgnoreCase("userlogin")) {
                context.getLogger().log("user login\n");
                return userLogin(event, context);
            }

            if (event.getPathParameters().get("action").equalsIgnoreCase("devicelogin")) {
                context.getLogger().log("device login\n");
                return deviceLogin(event, context);
            }
        }

        return new APIGatewayProxyResponseEvent()
                .withStatusCode(404);
    }

    public APIGatewayProxyResponseEvent getPhotos(APIGatewayProxyRequestEvent event, Context context) {
        try {
            String sessionId = event.getHeaders().get("session_id");
            if (sessionId == null) {
                return new APIGatewayProxyResponseEvent().withStatusCode(401);
            }

            ArrayList<PhotoMetadata> photoMetadataList = this.dataDB.GetAllPhotos(sessionId, context).getOrThrow();
            ArrayList<PhotoResponse> getPhotosList = new ArrayList<>();
            for (PhotoMetadata photoMetadata : photoMetadataList) {
                getPhotosList.add(
                        new PhotoResponse(photoMetadata.getPhotoName(),
                                this.photoStorage.getPhoto(photoMetadata.getPhotoName()).getOrThrow()));
                context.getLogger().log(getPhotosList.get(getPhotosList.size() - 1).getUrl() + "\n");
            }

            PhotosResponse presentationGetPhotos = new PhotosResponse(getPhotosList);

            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(200)
                    .withBody(gson.toJson(presentationGetPhotos));
        }

        catch (FailiureException fe) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(Result.getStatusAsHttpCode(fe.getStatus()));
        }
    }

    public APIGatewayProxyResponseEvent uploadPhoto(APIGatewayProxyRequestEvent event, Context context) {
        try {

            String sessionId = event.getHeaders().get("session_id");
            if (sessionId == null) {
                return new APIGatewayProxyResponseEvent().withStatusCode(401);
            }

            String photoName = this.dataDB.UploadPendingPhoto(sessionId, context).getOrThrow();
            UploadPhoto photoUpload = this.photoStorage.getPhotoUpload(photoName).getOrThrow();
            UploadPhotoResponse result = new UploadPhotoResponse(
                    photoName,
                    photoUpload.getUrl(),
                    photoUpload.getHttpRequest(),
                    photoUpload.getHeaders());

            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(200)
                    .withBody(gson.toJson(result));
        }

        catch (FailiureException fe) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(Result.getStatusAsHttpCode(fe.getStatus()));
        }
    }

    public APIGatewayProxyResponseEvent notify(APIGatewayProxyRequestEvent event, Context context) {
        try {

            String sessionId = event.getHeaders().get("session_id");
            if (sessionId == null) {
                return new APIGatewayProxyResponseEvent().withStatusCode(401);
            }

            String photoName = gson.fromJson(event.getBody(), NotifyRequest.class).getPhotoName();
            if (!this.photoStorage.checkPhotoUploaded(photoName).getOrThrow()) {
                context.getLogger().log("Photo has not been found in S3");
                return new APIGatewayProxyResponseEvent().withStatusCode(404);
            }

            if (!this.dataDB.ConfirmPendingPhoto(sessionId, photoName, context).getOrThrow()) {
                context.getLogger().log("Internal service error");
                return new APIGatewayProxyResponseEvent().withStatusCode(500);
            }

            QueueMessage queueMessage = new QueueMessage(
                    this.dataDB.GetAssociatedUsers(sessionId, context).getOrThrow()
                            .stream()
                            .map(
                                    user -> new UserRecipient(
                                            user.getFirstName(),
                                            user.getLastName(),
                                            user.getMobile()))
                            .collect(Collectors.toList()),
                    photoName);

            if (this.messagingQueue.DispatchMessage(queueMessage).getOrThrow()) {
                return new APIGatewayProxyResponseEvent()
                        .withStatusCode(202);
            }

            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(500);
        }

        catch (JsonSyntaxException jse) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(400);
        }

        catch (FailiureException fe) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(Result.getStatusAsHttpCode(fe.getStatus()));
        }
    }

    public APIGatewayProxyResponseEvent userLogin(APIGatewayProxyRequestEvent event, Context context) {
        try {
            UserLoginRequest request = gson.fromJson(event.getBody(), UserLoginRequest.class);
            LoginResponse response = new LoginResponse(
                    this.dataDB.UserAuthenticate(request.getUsername(), request.getPassword(), context).getOrThrow());
            Map<String, String> headers = new HashMap<>();
            headers.put("Set-Cookie", "session_id=" + response.getSessionId());
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(201)
                    .withHeaders(headers)
                    .withBody(gson.toJson(response));
        }

        catch (JsonSyntaxException jse) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(400);
        }

        catch (FailiureException fe) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(Result.getStatusAsHttpCode(fe.getStatus()));
        }
    }

    public APIGatewayProxyResponseEvent deviceLogin(APIGatewayProxyRequestEvent event, Context context) {
        try {
            DeviceLoginRequest request = gson.fromJson(event.getBody(), DeviceLoginRequest.class);
            LoginResponse response = new LoginResponse(
                    this.dataDB.DeviceAuthenticate(request.getDeviceName(), request.getDeviceKey(), context).getOrThrow());
            Map<String, String> headers = new HashMap<>();
            headers.put("Set-Cookie", "session_id=" + response.getSessionId());
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(201)
                    .withHeaders(headers)
                    .withBody(gson.toJson(response));
        }

        catch (JsonSyntaxException jse) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(400);
        }

        catch (FailiureException fe) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(Result.getStatusAsHttpCode(fe.getStatus()));
        }
    }

    public APIGatewayProxyResponseEvent getUser(APIGatewayProxyRequestEvent event, Context context) {
        try {
            String sessionId = event.getHeaders().get("session_id");
            if (sessionId == null) {
                return new APIGatewayProxyResponseEvent().withStatusCode(401);
            }

            User user = this.dataDB.GetSelfUser(sessionId, context).getOrThrow();
            GetUserResponse response = new GetUserResponse(user.getUsername(), user.getFirstName(), user.getLastName(),
                    user.getMobile(), user.getNotify() == 1, user.getDeviceName());
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(200)
                    .withBody(gson.toJson(response));
        }

        catch (FailiureException fe) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(Result.getStatusAsHttpCode(fe.getStatus()));
        }
    }

    public APIGatewayProxyResponseEvent updateUser(APIGatewayProxyRequestEvent event, Context context) {
        try {
            String sessionId = event.getHeaders().get("session_id");
            if (sessionId == null) {
                return new APIGatewayProxyResponseEvent().withStatusCode(401);
            }

            UpdateUserRequest updateUserRequest = gson.fromJson(event.getBody(), UpdateUserRequest.class);
            User user = this.dataDB.GetSelfUser(sessionId, context).getOrThrow();

            if (!user.getUsername().equals(updateUserRequest.getUsername())) {
                if (this.dataDB.CheckUsernameExists(updateUserRequest.getUsername(), context).getOrThrow()) {
                    return new APIGatewayProxyResponseEvent()
                        .withStatusCode(409)
                        .withBody("Username not available");
                }
            }

            if (!user.getMobile().equals(updateUserRequest.getMobile())) {
                if ((!updateUserRequest.getMobile().matches("[0-9]+")) || (updateUserRequest.getMobile().length() != 11)) {
                    return new APIGatewayProxyResponseEvent()
                    .withStatusCode(400)
                    .withBody("Invalid mobile phone number format");
                }
            }

            User updateUser = new User(user.getId(), updateUserRequest.getUsername(), updateUserRequest.getFirstName(), updateUserRequest.getLastName(), updateUserRequest.getMobile(), updateUserRequest.getEnableNotifications() ? 1:0, user.getDeviceName());
            boolean updated = this.dataDB.UpdateUser(sessionId, updateUser, context).getOrThrow();
            return new APIGatewayProxyResponseEvent()
                .withStatusCode(updated ? 204 : 500);
        }

        catch (FailiureException fe) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(Result.getStatusAsHttpCode(fe.getStatus()));
        }

        catch (JsonSyntaxException jse) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(400);
        }
    }
}
